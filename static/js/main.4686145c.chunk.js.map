{"version":3,"sources":["battleGridSetup.ts","features/score/scoreSlice.ts","features/score/Score.tsx","features/timer/timerSlice.ts","features/high-scores/highScoresSlice.ts","features/timer/Timer.tsx","features/fire-control/fireControlSlice.ts","features/fire-control/FireControl.tsx","features/LetterBox.tsx","features/NumberBox.tsx","features/battle-grid-box/battleGridSlice.ts","features/battle-grid-box/BattleGridBox.tsx","features/Instructions.tsx","features/high-scores/HighScores.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["letters","split","numbers","Array","keys","allCoordinatesSetup","letter_index","length","number_index","push","toString","allCoordinates","forEach","el","index","initialState","hits","ships","currentCoordinate","status","fireControlSlice","createSlice","name","reducers","fire","state","action","payload","newStatus","indexOf","explosion","Audio","setTimeout","play","selectHits","actions","Object","values","fireControl","filter","v","Score","props","currentHits","useSelector","className","title","slice","initialSecond","Date","now","currentSecond","timerSlice","decrementTimer","Math","round","resetTimer","selectCurrentSecond","timer","highScoresSlice","scores","updateHighScores","currentScore","sort","one","two","displayHighScore","highScores","Timer","dispatch","useDispatch","useEffect","initialShips","arr","size","temp","shuffled","i","floor","random","getRandomSubarray","coordinate","toUpperCase","laser","access_denied","hit","resetFireControlState","FireControl","useState","setCoordinate","src","width","alt","type","maxLength","value","onChange","e","target","onKeyPress","which","onClick","LetterBox","key","this","cellKey","cellLetter","React","NumberBox","cellValue","selectStatus","BattleGridBox","battleStatus","numberGridValue","Instructions","Component","HighScores","shouldDisplayHighScore","displayedHighScores","topFiveHighScores","console","log","map","App","id","countdown","count","number_value","space_value","space_index","store","configureStore","reducer","fireControlReducer","timerReducer","highScoresReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4686145c.chunk.js","sourcesContent":["export const letters = 'ABCDEFG'.split('')\nexport const numbers = [...Array(7).keys()];\n\n\nlet allCoordinatesSetup = []\nfor(let letter_index = 0; letter_index < letters.length; letter_index++){\n  for(let number_index = 0; number_index < numbers.length; number_index++){\n    allCoordinatesSetup.push(letters[letter_index]+(numbers[number_index]+1).toString())\n  }\n}\n\nexport const allCoordinates = allCoordinatesSetup","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { allCoordinates } from '../../battleGridSetup'\r\n\r\n\r\ninterface ScoreState {\r\n  hits: string[],\r\n  ships: string[],\r\n  currentCoordinate: string,\r\n  status: {[characterName: string]: string},\r\n}\r\n\r\n\r\nlet allCoordinatesSetup: {[characterName: string]: string} = {}\r\n\r\nallCoordinates.forEach((el, index) => allCoordinatesSetup[el] = 'clean' )\r\n\r\nconst initialState: ScoreState = {\r\n  hits: [],\r\n  ships: ['B2', 'E3'],\r\n  currentCoordinate: '',\r\n  status: allCoordinatesSetup,\r\n};\r\n\r\nexport const fireControlSlice = createSlice({\r\n  name: 'fireControl',\r\n  initialState,\r\n  reducers: {\r\n    fire: (state, action: PayloadAction<string>) => {\r\n      state.hits = [...state.hits, action.payload]\r\n      let newStatus = state.status\r\n      if(state.ships.indexOf(action.payload) !== -1){\r\n        const explosion = new Audio('/explosion.mp3');\r\n        setTimeout(function(){\r\n          explosion.play()\r\n        }, 500)\r\n        newStatus[action.payload] = 'ship-hit'\r\n      }else{\r\n        newStatus[action.payload] = 'hit'\r\n      }\r\n\r\n      state.status = newStatus\r\n    },\r\n\r\n  },\r\n});\r\n\r\nexport const { fire } = fireControlSlice.actions;\r\n\r\n\r\nexport const selectHits = (state: RootState) => Object.values(state.fireControl.status).filter((v)=> v === \"ship-hit\").length;\r\nexport const selectSinks = (state: RootState) => state.fireControl.currentCoordinate;\r\n\r\nexport default fireControlSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectHits\r\n} from './scoreSlice';\r\n\r\ninterface ScoreProps {\r\n  title: string,\r\n  count: number\r\n}\r\n\r\nexport function Score(props: ScoreProps) {\r\n  const currentHits = useSelector(selectHits);\r\n\r\n  return (\r\n    <div className='counter'>\r\n      <h3>{props.title}</h3>\r\n      <div className='count'>\r\n        {('000' + currentHits).slice(-3)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nexport const secondsForGame = 30\r\n\r\ninterface TimerState {\r\n  initialSecond: number,\r\n  currentSecond: number\r\n}\r\n\r\nconst initialState: TimerState = {\r\n  initialSecond: Date.now(),\r\n  currentSecond: secondsForGame\r\n};\r\n\r\nexport const timerSlice = createSlice({\r\n  name: 'timer',\r\n  initialState,\r\n  reducers: {\r\n    decrementTimer: state => {\r\n      if(state.currentSecond > 0){\r\n        state.currentSecond = secondsForGame - Math.round((Date.now() - state.initialSecond)/ 1000)\r\n      }\r\n    },\r\n    resetTimer: state => {\r\n      state.initialSecond = Date.now()\r\n      state.currentSecond = secondsForGame\r\n    },\r\n  },\r\n});\r\n\r\nexport const { resetTimer, decrementTimer } = timerSlice.actions;\r\n\r\n\r\nexport const selectCurrentSecond = (state: RootState) => state.timer.currentSecond;\r\nexport const selectInitialSecond = (state: RootState) => state.timer.initialSecond;\r\n\r\nexport default timerSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\ninterface HighScoresState {\r\n  scores: [string, number][];\r\n}\r\n\r\nconst initialState: HighScoresState = {\r\n  // scores: ['AAA': 2, 'BBB': 3, 'CCC': 1, 'UUU': 8, 'WWW': 3]\r\n  scores: [['AAA', 2], ['BBB', 3], ['CCC', 1], ['UUU', 8], ['WWW', 3]]\r\n};\r\n\r\nexport const highScoresSlice = createSlice({\r\n  name: 'highScores',\r\n  initialState,\r\n  reducers: {\r\n    updateHighScores: (state, action: PayloadAction<number>) => {\r\n      const scores = state.scores\r\n      const currentScore = action.payload\r\n\r\n      scores.push(['YOU', currentScore])\r\n      state.scores =  scores.sort((one,two)=> (one[1] > two[1]) ? -1 : 1)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { updateHighScores } = highScoresSlice.actions;\r\n\r\n\r\nexport const displayHighScore = (state: RootState) => state.timer.currentSecond === 0;\r\nexport const highScores = (state: RootState) => state.highScores.scores\r\n\r\n\r\nexport default highScoresSlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  selectCurrentSecond,\r\n  decrementTimer\r\n} from './timerSlice';\r\nimport { updateHighScores } from '../high-scores/highScoresSlice'\r\nimport {\r\n  selectHits\r\n} from '../score/scoreSlice';\r\n\r\ninterface TimerProps {\r\n  countdown: number\r\n}\r\n\r\nexport function Timer(props: TimerProps){\r\n\r\n  const currentSecond = useSelector(selectCurrentSecond);\r\n  const currentScore = useSelector(selectHits);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n\r\n    setTimeout(()=>{dispatch(decrementTimer())}, 1000)\r\n    if(currentSecond === 0){\r\n      dispatch(updateHighScores(currentScore))\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className='counter'>\r\n      <h3>Timer</h3>\r\n      <div className='count'>\r\n        {currentSecond}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { allCoordinates } from '../../battleGridSetup'\r\n\r\ninterface FireControlState {\r\n  hits: string[],\r\n  ships: string[],\r\n  currentCoordinate: string,\r\n  status: {[characterName: string]: string},\r\n}\r\n\r\n\r\nlet allCoordinatesSetup: {[characterName: string]: string} = {}\r\n\r\nallCoordinates.forEach((el, index) => allCoordinatesSetup[el] = 'clean' )\r\n\r\nfunction getRandomSubarray(arr: string[], size: number) {\r\n    var shuffled = arr.slice(0), i = arr.length, temp, index;\r\n    while (i--) {\r\n        index = Math.floor((i + 1) * Math.random());\r\n        temp = shuffled[index];\r\n        shuffled[index] = shuffled[i];\r\n        shuffled[i] = temp;\r\n    }\r\n    return shuffled.slice(0, size);\r\n}\r\n\r\nconst initialShips = getRandomSubarray(allCoordinates, 10)\r\n\r\nconst initialState: FireControlState = {\r\n  hits: [],\r\n  ships: initialShips,\r\n  currentCoordinate: '',\r\n  status: allCoordinatesSetup,\r\n};\r\n\r\n\r\nexport const fireControlSlice = createSlice({\r\n  name: 'fireControl',\r\n  initialState,\r\n  reducers: {\r\n    fire: (state, action: PayloadAction<string>) => {\r\n      let coordinate = action.payload.toUpperCase()\r\n      state.hits = [...state.hits, coordinate]\r\n      let newStatus = state.status\r\n\r\n      const laser = new Audio('/laser-shot.mp3');\r\n      const access_denied = new Audio('/access-denied.mp3');\r\n\r\n      if(allCoordinates.indexOf(coordinate) === -1 || state.hits.filter((hit)=>hit === coordinate).length > 1){\r\n        access_denied.play()\r\n      }else if(state.hits.filter((hit)=>hit === coordinate).length === 1){\r\n        laser.play();\r\n      }\r\n\r\n      if(state.ships.indexOf(coordinate) !== -1){\r\n        const explosion = new Audio('/explosion.mp3');\r\n        setTimeout(function(){\r\n          explosion.play()\r\n        }, 500)\r\n        newStatus[coordinate] = 'ship-hit'\r\n      }else{\r\n        newStatus[coordinate] = 'hit'\r\n      }\r\n\r\n      state.status = newStatus\r\n    },\r\n\r\n    resetFireControlState: state => {\r\n      state.status = allCoordinatesSetup\r\n      state.ships = initialShips\r\n      state.hits = []\r\n    },\r\n  }\r\n});\r\n\r\nexport const { fire, resetFireControlState } = fireControlSlice.actions;\r\n\r\nexport const selectCurrentCoordinate = (state: RootState) => state.fireControl.currentCoordinate;\r\n\r\nexport default fireControlSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  fire\r\n} from './fireControlSlice';\r\n\r\nexport function FireControl() {\r\n  const dispatch = useDispatch();\r\n  const [coordinate, setCoordinate] = useState('C3');\r\n\r\n  return (\r\n    <div className='fireControl'>\r\n      <img src='crosshairs.png' width=\"100\" alt='crosshairs'/>\r\n      <input\r\n        type='text'\r\n        maxLength={2}\r\n        value={coordinate}\r\n        onChange={e => setCoordinate(e.target.value)}\r\n        onKeyPress={(e) => { if(e.which === 13){dispatch(fire(coordinate))}}}\r\n      />\r\n      <button\r\n        onClick={() => { dispatch(fire(coordinate))}}\r\n      >\r\n        FIRE LASER\r\n      </button>\r\n      <audio className=\"audio-element\">\r\n        <source src=\"/laser-shot.mp3\"></source>\r\n      </audio>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\n\nexport interface LetterBoxProps { cellLetter: string, cellKey: number; }\n\nexport class LetterBox extends React.Component<LetterBoxProps, {}> {\n\n    render() {\n        return <td key={this.props.cellKey} className='letterBox'>{this.props.cellLetter}</td>\n    }\n}","import * as React from \"react\";\n\nexport interface NumberBoxProps { cellValue: number; cellKey: number; }\n\nexport class NumberBox extends React.Component<NumberBoxProps, {}> {\n\n    render() {\n        return <td key={this.props.cellKey} className='numberBox'>{this.props.cellValue}</td>\n    }\n}","import { RootState } from '../../app/store';\r\n\r\nexport const selectStatus = (state: RootState) => state.fireControl.status;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectStatus\r\n} from './battleGridSlice';\r\n\r\n\r\ninterface BattleGridBoxProps {\r\n  cellKey: number,\r\n  cellValue: number,\r\n  numberGridValue: number,\r\n}\r\n\r\nexport function BattleGridBox(props: BattleGridBoxProps) {\r\n\r\n  const status = useSelector(selectStatus);\r\n\r\n  const coordinate = 'ABCDEFG'.split('')[props.cellValue]+props.numberGridValue\r\n  const battleStatus = status[coordinate]\r\n\r\n  if(battleStatus === 'ship-hit'){\r\n    return <td key={props.cellKey} className='battleGridBox hit ship'><img src='starship-hopper.png' alt='HIT' width='60px' className='dragonHit'/></td>\r\n  }else if(battleStatus === 'ship'){\r\n    return <td key={props.cellKey} className='battleGridBox'></td>\r\n  }else if(battleStatus === 'hit'){\r\n    return <td key={props.cellKey} className='battleGridBox hit'></td>\r\n  }else{\r\n    return <td key={props.cellKey} className='battleGridBox'></td>\r\n  }\r\n\r\n}","import React from 'react';\n\nexport class Instructions extends React.Component<{}> {\n\n  render() {\n\n    return <div className='instructions'>\n          <h3>How to Play</h3>\n          <p>\n            Ships have been hidden all around space! Use the targeting computer at the bottom of the screen and the FIRE LASER button to try to sink them and see how many you can locate in the allotted time.\n          </p>\n        </div>\n  }\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  displayHighScore,\r\n  highScores\r\n} from './highScoresSlice';\r\nimport {\r\n  resetFireControlState\r\n} from '../fire-control/fireControlSlice';\r\nimport {\r\n  resetTimer\r\n} from '../timer/timerSlice';\r\n\r\nexport function HighScores() {\r\n  const shouldDisplayHighScore = useSelector(displayHighScore);\r\n  const displayedHighScores = useSelector(highScores);\r\n  const dispatch = useDispatch()\r\n\r\n  const topFiveHighScores = displayedHighScores.slice(0,5)\r\n  console.log(topFiveHighScores)\r\n\r\n  return shouldDisplayHighScore ? (\r\n    <div className='high-score'>\r\n      <div className='inner'>\r\n        <h1>High Scores</h1>\r\n        <table>\r\n          <tbody>\r\n            {topFiveHighScores.map((key: [string, number], index: number)=>{\r\n              return <tr>\r\n                <td>\r\n                  {key[0]}\r\n                </td>\r\n                <td>\r\n                  {key[1]}\r\n                </td>\r\n              </tr>\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <button\r\n        className='play-again'\r\n        onClick={()=>{\r\n          dispatch(resetFireControlState());\r\n          dispatch(resetTimer());\r\n        }}\r\n      >\r\n        PLAY AGAIN\r\n      </button>\r\n    </div>\r\n  ) : <div></div>;\r\n}\r\n","import React from 'react';\r\nimport { Score } from './features/score/Score';\r\nimport { Timer } from './features/timer/Timer';\r\nimport './App.css';\r\n\r\nimport { FireControl } from './features/fire-control/FireControl'\r\nimport { LetterBox } from './features/LetterBox'\r\nimport { NumberBox } from './features/NumberBox'\r\nimport { BattleGridBox } from './features/battle-grid-box/BattleGridBox'\r\nimport { letters, numbers } from './battleGridSetup'\r\nimport { Instructions } from './features/Instructions'\r\nimport { HighScores } from './features/high-scores/HighScores'\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div id='wrapper'>\r\n      <div className='topMenu'>\r\n        <img src='spacex-logo.jpg' width=\"200\" alt='SpaceX'/>\r\n        <h2>BattleStarship</h2>\r\n      </div>\r\n      <div className='left'>\r\n        <Timer countdown={100}/>\r\n        <Score title={'Sunk'} count={5}/>\r\n        <Instructions />\r\n      </div>\r\n      <div className='left'>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n              </td>\r\n              {letters.map((value, index) => {\r\n                return <LetterBox cellLetter={value} cellKey={index}/>\r\n              })}\r\n            </tr>\r\n            {numbers.map((number_value, number_index) => {\r\n              return <tr>\r\n                <NumberBox cellValue={number_value+1} cellKey={number_index}/>\r\n                {numbers.map((space_value, space_index) => {\r\n                  return <BattleGridBox cellValue={space_value} cellKey={space_index} numberGridValue={number_value+1}/>\r\n                })}\r\n              </tr>\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <FireControl/>\r\n      </div>\r\n      <div className='clear'>\r\n      </div>\r\n      <HighScores/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport fireControlReducer from '../features/fire-control/fireControlSlice';\r\nimport timerReducer from '../features/timer/timerSlice';\r\nimport highScoresReducer from '../features/high-scores/highScoresSlice';\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    fireControl: fireControlReducer,\r\n    timer: timerReducer,\r\n    highScores: highScoresReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}